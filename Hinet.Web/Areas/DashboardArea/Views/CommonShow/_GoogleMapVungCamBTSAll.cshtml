@using Newtonsoft.Json

<style>
    #map {
        width: 100%;
        height: 600px;
    }
    html,
    @{
        var listVungCam = Html.Raw(JsonConvert.SerializeObject(ViewBag.listVungCam));
    }
    .chuThich {
        display: flex;
        justify-content: start;
    }
    .red {
        color: red;
    }
    .orange {
        color: orange; 
    }
</style>

<div class="modal-dialog" style="width: 80%">
    <div class="modal-content">
        <div class="modal-header">
            <button type="button" class="close" data-dismiss="modal">&times;</button>
            <div class="center">
                <h4 class="modal-title">Bản đồ các vùng cấm triển khai trạm BTS</h4>
            </div>
        </div>
        <div class="modal-body">

            <div id="map"></div>
            <div class="chuThich">
                <p class="red">#Vùng cấm theo khoảng cách tối thiểu có màu đỏ : </p>
                <p class="orange">#Vùng cấm theo độ cao có màu cam</p>
            </div>
        </div>
        <div class="modal-footer center">
            <button type="button" class="btn btn-default btn-sm" data-dismiss="modal">Đóng</button>
        </div>
    </div>
</div>


<script>

    var listVungCam = eval(@listVungCam);

     // lấy dữ liệu từ controller gửi sang
    var doZoom = 12;
    var polygons = [];
    var centerView = { lat: 20.057045, lng: 105.472146 };
    var listMarker = [];

    var VungCamType = {
        VungCamTrienKhai: "VungCamTrienKhai",
        VungHanCheDoCao: "VungHanCheDoCao",
    };

    function tinhTamMotDaGiac(polygonCoords) {
        if (!polygonCoords) {
            return centerView;
        }

        const lstP = polygonCoords.map(item => {
            return { lat: item.latitude, lng: item.longtitude };
        });
        const bounds = new google.maps.LatLngBounds();
        for (let i = 0; i < lstP.length; i++) {
            bounds.extend(lstP[i]);
        }
        const center = bounds.getCenter();
        return { lat: center.lat(), lng: center.lng()};
    }


    function tinhTamNhieuDaGiac(listCenter) {
        if (!listCenter) centerView;
        let sumP = { lat: 0, lng: 0 };

        for (let i = 0; i < listCenter.length; i++) {
            sumP.lat += listCenter[i].lat;
            sumP.lng += listCenter[i].lng;
        }

        sumP.lat = sumP.lat / listCenter.length;
        sumP.lng = sumP.lng / listCenter.length;

        return sumP;
    }

    // Hàm lấy màu sắc cho polygon
    function getColorForPolygon(LoaiVungCam) {

        // Màu của vùng cấm khoảng cách
        if (VungCamType.VungCamTrienKhai == LoaiVungCam) return "red";

        // Màu của vùng cấm độ cao
        if (VungCamType.VungHanCheDoCao == LoaiVungCam) return "orange";

    }

    //Vẽ bản đồ
    function initMap() {
        let centers = [];
        listVungCam.forEach(item => {
            centers.push(tinhTamMotDaGiac(item.ToaDo));
        })

        const map = new google.maps.Map(document.getElementById("map"), {
            zoom: doZoom,
            center: tinhTamNhieuDaGiac(centers),
            mapTypeId: "terrain",
        });



        const wmsLayer = getWMSLayer(map, WMS_UrlMap.layers_BaseMap, '', 1.0);

        // Add the WMS layer to the map
        map.overlayMapTypes.push(wmsLayer);

        if (listVungCam != null) {
            listVungCam.forEach(item => {
                    const vungcamBTS = new google.maps.Polygon({
                        paths: item.ToaDo.map(item => {
                            return { lat: item.latitude, lng: item.longtitude }
                        }),
                        strokeOpacity: 0.8,
                        strokeWeight: 3,
                        fillColor: getColorForPolygon(item.Type),
                        fillOpacity: 0.8,
                    });
                    polygons.push(vungcamBTS);
                    const marker = new google.maps.Marker({
                        position: tinhTamMotDaGiac(item.ToaDo),
                        map: map,
                        label: {
                            text: item.Name,
                            color: "black",
                            fontSize: "12px",
                            fontWeight: "bold"
                        },
                        icon: {
                            url: '/Uploads/IconMarker/trongsuot.png',
                            scaledSize: new google.maps.Size(1, 1),
                            anchor: new google.maps.Point(0, 10),
                        },
                    });

                    listMarker.push(marker);
                })
        }

        polygons.forEach(polygon => {
            polygon.setMap(map);
        });

        map.addListener('zoom_changed', () => {
            const currentZoom = map.getZoom();
            if (currentZoom >= 11) {
                listMarker.forEach(item => {
                    item.setVisible(true);
                })
            } else {
                listMarker.forEach(item => {
                    item.setVisible(false);
                })
            }
        });
    }

    window.initMap = initMap;

</script>

<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAgEUiZdXI2mRi-wE6aUroT_lPgVbnBAsc&language=vi-VN&callback=initMap&v=weekly"
        defer></script>

@Scripts.Render("~/bundles/jqueryval")